// src/pages/iwealthy/IWealthyLayout.tsx

import { useMemo, useCallback } from 'react'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useCallback
import { Routes, Route, Navigate, useNavigate, useLocation } from 'react-router-dom';

// Import Store ‡πÅ‡∏•‡∏∞ Pages/Modals ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import { useAppStore } from '../../stores/appStore';
import IWealthyFormPage from "./iWealthyFormPage";
import IWealthyTablePage from "./iWealthyTablePage";
import IWealthyChartPage from "./iWealthyChartPage";
import { IWealthyReportPage } from './iWealthyReportPage';
import PausePremiumModal from '../../components/PausePremiumModal';
import ReduceSumInsuredModal from '../../components/ReduceSumInsuredModal';
import WithdrawalPlanModal from '../../components/WithdrawalPlanModal';
import ChangeFrequencyModal from '../../components/ChangeFrequencyModal';
import AddInvestmentModal from '../../components/AddInvestmentModal';
import SaveRecordModal from '../../components/SaveRecordModal';
import LoadRecordModal from '../../components/LoadRecordModal';
import { calculateLifeCoverage } from '../../lib/calculations';


// Import Components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
import TopButtons from "../../components/TopButtons"; 
import InvestmentReturnInput from "../../components/InvestmentReturnInput";
import { Button } from '@/components/ui/button';
import { FaSave, FaFolderOpen } from 'react-icons/fa';

const iWealthyTabs = [
    { label: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", path: "/iwealthy/form" },
    { label: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", path: "/iwealthy/table" },
    { label: "‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", path: "/iwealthy/chart" },
    { label: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", path: "/iwealthy/report" },
];

export default function IWealthyLayout() {
  const navigate = useNavigate();
  const location = useLocation();

  // ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Zustand Store
  const {
    activeRecordId,
    pin, openSaveModal, openLoadModal,
    runIWealthyCalculation, iWealthyIsLoading,
    iWealthyInvestmentReturn, setIWealthyInvestmentReturn,
    iWealthyPausePeriods, iWealthySumInsuredReductions, iWealthyWithdrawalPlan,
    iWealthyFrequencyChanges, iWealthyAdditionalInvestments,
    openPauseModal, openReduceModal, openWithdrawalModal, 
    openChangeFreqModal, openAddInvestmentModal,iWealthyReductionsNeedReview,
    iWealthyAge, iWealthyGender, iWealthyPaymentFrequency,
    iWealthyRpp, iWealthyRtu, iWealthySumInsured,
  } = useAppStore();

  const activeActions = useMemo(() => ({
    pause: iWealthyPausePeriods.length > 0,
    reduceSI: iWealthySumInsuredReductions.length > 0,
    withdrawPlan: iWealthyWithdrawalPlan.length > 0,
    changeFreq: iWealthyFrequencyChanges.length > 0,
    addInvest: iWealthyAdditionalInvestments.length > 0,
  }), [iWealthyPausePeriods, iWealthySumInsuredReductions, iWealthyWithdrawalPlan, iWealthyFrequencyChanges, iWealthyAdditionalInvestments]);

  const needsReviewActions = useMemo(() => ({
    reduceSI: iWealthyReductionsNeedReview,
    // (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏Å‡πá‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
    // pause: someOtherReviewFlag, 
  }), [iWealthyReductionsNeedReview]);

  // +++ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç +++
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Handler ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  const handleCalculateClick = useCallback(async () => {
    // 1. ‡πÄ‡∏Å‡πá‡∏ö path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    const fromPath = location.pathname;

    // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô Store ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    await runIWealthyCalculation();

    // 3. ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (fromPath.includes('/iwealthy/form')) {
      // 4. ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏≤‡∏ü
      navigate('/iwealthy/chart');
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á/‡∏Å‡∏£‡∏≤‡∏ü) ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
  }, [location.pathname, runIWealthyCalculation, navigate]);

  const executeSave = async (recordName: string) => {
    if (!pin) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (PIN)');
        return;
    }

    // --- 1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
    const lifeCoverage = calculateLifeCoverage(iWealthySumInsured);
    const totalAnnualPremium = (iWealthyRpp || 0) + (iWealthyRtu || 0);
    const dataToSave = {
        age: iWealthyAge,
        gender: iWealthyGender,
        paymentFrequency: iWealthyPaymentFrequency,
        rpp: iWealthyRpp,
        rtu: iWealthyRtu,
        sumInsured: iWealthySumInsured,
        sumInsuredReductions: iWealthySumInsuredReductions,
        lifeCoverage: lifeCoverage,
        totalAnnualPremium: totalAnnualPremium,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå iWealthy ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...
    };

    try {
      let response;
      
      // --- 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic if/else ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" ---
      if (activeRecordId) {
        // UPDATE (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ö)
        response = await fetch(`/api/record/${activeRecordId}`, {
          method: 'PUT',
          headers: { 
            'Content-Type': 'application/json',
            'x-user-pin': pin,
          },
          body: JSON.stringify({ recordName, data: dataToSave }),
        });
      } else {
        // CREATE (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
        response = await fetch('/api/save-project', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pin, projectName: 'iWealthy', recordName, data: dataToSave }),
        });
      }

      const result = await response.json();
      if (response.ok) {
        alert('üéâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      } else {
        alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${result.error}`);
      }
    } catch (error) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server ‡πÑ‡∏î‡πâ');
    }
  };

  return (
    <div className="flex flex-col h-auto -mt-2">
        {/* ‡∏™‡πà‡∏ß‡∏ô Top Bar ‡πÅ‡∏•‡∏∞ Tab Bar (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) */}
        <div className="flex justify-between items-center px-4 py-3 bg-blue-50 flex-shrink-0">
            <TopButtons
                onOpenPauseModal={openPauseModal}
                onOpenReduceModal={openReduceModal}
                onOpenWithdrawalModal={openWithdrawalModal}
                onOpenChangeFreqModal={openChangeFreqModal}
                onOpenAddInvestmentModal={openAddInvestmentModal}
                activeActions={activeActions}
                needsReviewActions={needsReviewActions}
            />
            <div className="w-full max-w-xs">
                <InvestmentReturnInput
                    value={iWealthyInvestmentReturn}
                    onChange={setIWealthyInvestmentReturn}
                    showInputField={true}
                />
            </div>
        </div>
        <div className="flex bg-blue-50 px-4 relative">
            {iWealthyTabs.map((tab) => {
                const isActive = location.pathname.startsWith(tab.path);
                return (
                    <button key={tab.path} onClick={() => navigate(tab.path)} className={`relative px-4 py-2 text-sm font-medium rounded-t-md transition-colors duration-200 focus:outline-none ${isActive ? 'text-blue-600 bg-white border-t border-l border-r border-gray-300' : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50 border-b border-gray-300'} `}>
                        {tab.label}
                    </button>
                );
            })}
            <div className="flex-grow bg-blue-50 border-b border-gray-300"></div>
        </div>

        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ */}
        <div className="flex-1 bg-white p-4 md:p-6">
            <Routes>
                <Route index element={<Navigate to="form" replace />} />
                <Route path="form" element={<IWealthyFormPage />} />
                <Route path="table" element={<IWealthyTablePage />} />
                <Route path="chart" element={<IWealthyChartPage />} />
                <Route path="report" element={<IWealthyReportPage />} />
            </Routes>
        </div>

        <div className="flex justify-between items-center px-6 py-2 bg-blue-50 border-t border-gray-200">
            <div className="flex gap-2">
                <Button variant="outline" size="lg" onClick={openSaveModal} className="text-green-700 border-green-700 hover:bg-green-50 hover:text-green-800 font-semibold py-2 px-4">
                    <FaSave className="mr-2" />
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </Button>
                <Button variant="outline" size="lg" onClick={openLoadModal} className="text-blue-700 border-blue-700 hover:bg-blue-50 hover:text-blue-800 font-semibold py-2 px-4">
                    <FaFolderOpen className="mr-2" />
                    ‡πÇ‡∏´‡∏•‡∏î
                </Button>
            </div>

                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤) */}
                <Button size="lg" onClick={handleCalculateClick} disabled={iWealthyIsLoading} className="bg-blue-800 hover:bg-blue-600 text-lg font-semibold py-2 px-4">
                    {iWealthyIsLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...' : '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì'}
                </Button>
                
        </div>
            <PausePremiumModal />
            <ReduceSumInsuredModal />
            <WithdrawalPlanModal />
            <ChangeFrequencyModal />
            <AddInvestmentModal />
            <SaveRecordModal onConfirmSave={executeSave} />
            <LoadRecordModal />
        </div>
    );
}
