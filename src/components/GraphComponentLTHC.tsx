// src/components/lthc/GraphComponentLTHC.tsx
import React, { useCallback, useMemo } from 'react'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useCallback, useMemo ‡∏ñ‡πâ‡∏≤ getTicks ‡πÉ‡∏ä‡πâ
import {
    ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid,
    Label,
    Tooltip, // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° Tooltip ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô import
    Dot      // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° Dot ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô import
} from 'recharts';

// Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü LTHC
export interface LthcChartDataType {
    age: number;
    healthPremiumAlone?: number;
    lthcCombinedPremium?: number;
    totalCombinedDeathBenefit?: number;
    cumulativeWithdrawal?: number;
    eoyAccountValue?: number;
}

interface GraphComponentLTHCProps {
    data: LthcChartDataType[];
    setHoveredData: (data: LthcChartDataType | null) => void;
    onAgeChange?: (age: number | undefined) => void;
    showHealthPremiumAlone: boolean;
    showLthcCombinedPremium: boolean;
    showTotalCombinedDB: boolean;
    showCumulativeWithdrawal: boolean;
    showIWealthyAV: boolean;
}

// Custom Tooltip ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ cursor ‡∏Ç‡∏≠‡∏á Tooltip ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ onMouseMove/Leave ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
const EmptyTooltipContent = () => {
    return null;
};

const GraphComponentLTHC: React.FC<GraphComponentLTHCProps> = ({
    data, setHoveredData, onAgeChange,
    showHealthPremiumAlone, showLthcCombinedPremium,
    showTotalCombinedDB, showCumulativeWithdrawal, showIWealthyAV
}) => {

    const handleMouseMove = (e: any) => {
        if (e && e.activePayload && e.activePayload.length > 0 && e.activeCoordinate) {
            const hoveredAge = e.activePayload[0].payload.age;
            setHoveredData(e.activePayload[0].payload as LthcChartDataType);
            if (onAgeChange && hoveredAge !== undefined) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hoveredAge
                onAgeChange(hoveredAge);
            }
        }
    };
    const handleMouseLeave = () => {
        setHoveredData(null);
        if (onAgeChange) onAgeChange(undefined);
    };

    const formatYAxisTick = (tickValue: number) => `${(tickValue / 1000000).toLocaleString(undefined, {minimumFractionDigits:0, maximumFractionDigits:1})}M`;

    // --- vvvv ‡∏•‡∏ö getTicks ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô vvvv ---
    const getTicks = useCallback((dataForTicks: LthcChartDataType[]): number[] => {
        if (!dataForTicks || dataForTicks.length === 0) return [];
        
        const ages = dataForTicks.map(d => d.age);
        const minAge = Math.min(...ages);
        const maxAge = Math.max(...ages);

        const ticks = new Set<number>();

        // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 0 ‡∏´‡∏£‡∏∑‡∏≠ 5 ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö minAge
        const startTick = Math.ceil(minAge / 5) * 5;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticks ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 0 ‡∏´‡∏£‡∏∑‡∏≠ 5 ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á maxAge
        for (let i = startTick; i <= maxAge; i += 5) {
            ticks.add(i);
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° tick ‡πÅ‡∏£‡∏Å (minAge) ‡πÅ‡∏•‡∏∞ tick ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (maxAge) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏ö‡πÄ‡∏™‡∏°‡∏≠
        ticks.add(minAge);
        ticks.add(maxAge);

        return Array.from(ticks).sort((a, b) => a - b);
    }, []);
    // --- ^^^^ ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^^ ---

    const memoizedTicks = useMemo(() => getTicks(data), [data, getTicks]);



    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö render active dot (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover)
    const renderActiveDot = (props: any) => {
        const { cx, cy, payload, dataKey } = props;

        let shouldShowDot = false;
        let dotStrokeColor = '#8884d8';
        if (dataKey === 'healthPremiumAlone' && showHealthPremiumAlone && payload.healthPremiumAlone !== undefined) {shouldShowDot = true; dotStrokeColor = "#ff7300";}
        else if (dataKey === 'lthcCombinedPremium' && showLthcCombinedPremium && payload.lthcCombinedPremium !== undefined) {shouldShowDot = true; dotStrokeColor = "#387908";}
        else if (dataKey === 'totalCombinedDeathBenefit' && showTotalCombinedDB && payload.totalCombinedDeathBenefit !== undefined) {shouldShowDot = true; dotStrokeColor = "#8884d8";}
        else if (dataKey === 'cumulativeWithdrawal' && showCumulativeWithdrawal && payload.cumulativeWithdrawal !== undefined) {shouldShowDot = true; dotStrokeColor = "#ffce56";}
        else if (dataKey === 'eoyAccountValue' && showIWealthyAV && payload.eoyAccountValue !== undefined) {shouldShowDot = true; dotStrokeColor = "#26A69A";}

        if (shouldShowDot && typeof cx === 'number' && typeof cy === 'number') {
            return <Dot cx={cx} cy={cy} r={5} stroke={dotStrokeColor} strokeWidth={2} fill="white" />;
        }
        return <></>;
    };

    return (
        <ResponsiveContainer width="100%" height="100%" minHeight={400}>          
            <LineChart
                data={data}
                onMouseMove={handleMouseMove}
                onMouseLeave={handleMouseLeave}
                margin={{ top: 20, right: 30, left: 20, bottom: 30 }} // ‡πÄ‡∏û‡∏¥‡πà‡∏° bottom margin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAxis Label
            >
                <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#e0e0e0"/>
                <XAxis
                    dataKey="age"
                    tickFormatter={(tick) => `${tick}`}
                    ticks={memoizedTicks} // ‡πÉ‡∏ä‡πâ ticks ‡∏ó‡∏µ‡πà memoized
                    interval="preserveStartEnd"
                    dy={10}
                    tick={{ fontSize: 10, fill: '#666' }}
                    padding={{ left: 10, right: 10 }} // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                >
                    <Label value="‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)" offset={0} position="insideBottom" style={{ fontSize: 11, fill:'#555' }} dy={15} />
                </XAxis>
                <YAxis
                    tickFormatter={formatYAxisTick}
                    domain={['auto', 'auto']}
                    tick={{ fontSize: 10, fill: '#666' }}
                    allowDataOverflow={false} // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô Y ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                >
                    <Label value="‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)" angle={-90} position="insideLeft" style={{ fontSize: 11, fill:'#555' }} dx={5} />
                </YAxis>
                {/* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° Tooltip component ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ EmptyTooltipContent ‚≠ê */}
                <Tooltip
                    cursor={{ stroke: 'rgba(100, 100, 100, 0.4)', strokeWidth: 1, strokeDasharray: '3 3' }} // ‡πÄ‡∏™‡πâ‡∏ô cursor ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                    content={<EmptyTooltipContent />} // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° tooltip
                    wrapperStyle={{ zIndex: 1000 }}
                    isAnimationActive={false}
                />

                {/* <Legend wrapperStyle={{ fontSize: '10px', paddingTop: 15 }} iconSize={10} /> */} {/* Legend ‡∏ñ‡∏π‡∏Å comment out */}

                {/* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° activeDot={renderActiveDot} ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Line ‚≠ê */}
                {showHealthPremiumAlone && <Line isAnimationActive={false} type="monotone" dataKey="healthPremiumAlone" name="‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, ‡∏™‡∏∞‡∏™‡∏°)" stroke="#ff7300" strokeWidth={2} dot={false} activeDot={renderActiveDot} />}
                {showLthcCombinedPremium && <Line isAnimationActive={false} type="monotone" dataKey="lthcCombinedPremium" name="‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ LTHC ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á (‡∏™‡∏∞‡∏™‡∏°)" stroke="#387908" strokeWidth={2} dot={false} activeDot={renderActiveDot} />}
                {showTotalCombinedDB && <Line isAnimationActive={false} type="monotone" dataKey="totalCombinedDeathBenefit" name="‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏£‡∏≤‡∏¢‡∏õ‡∏µ)" stroke="#8884d8" strokeWidth={2} dot={false} activeDot={renderActiveDot} />}
                {showCumulativeWithdrawal && <Line isAnimationActive={false} type="monotone" dataKey="cumulativeWithdrawal" name="‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å iW ‡∏£‡∏ß‡∏° (‡∏™‡∏∞‡∏™‡∏°)" stroke="#ffc658" strokeWidth={2} dot={false} activeDot={renderActiveDot} />}
                {showIWealthyAV && <Line isAnimationActive={false} type="monotone" dataKey="eoyAccountValue" name="‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ AV iWealthy (‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ)" stroke="#26A69A" strokeWidth={2} dot={false} activeDot={renderActiveDot} />}
            </LineChart>
        </ResponsiveContainer>
    );
};
export default GraphComponentLTHC;